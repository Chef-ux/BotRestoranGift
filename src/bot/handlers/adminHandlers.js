const { exportData } = require('../../services/exportService');
const { runDraw } = require('../../services/drawService');
const { getMessages, updateMessage } = require('../../services/messageService');
const { getDrawSettings, updateDrawSetting } = require('../../services/drawSettingsService');
const { mainMenu, adminMenu, backToAdmin, backToMain, drawSettingsMenu } = require('../keyboards/keyboards');

function isAdmin(ctx) {
  const { ADMIN_IDS } = require('../../config/botConfig');
  return ADMIN_IDS.includes(ctx.from.id);
}

async function adminStart(ctx) {
  if (!isAdmin(ctx)) {
    return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.');
  }
  await ctx.reply('üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminMenu);
}

async function handleEdit_texts(ctx) {
  if (!isAdmin(ctx)) return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  const messages = await getMessages();
  let text = 'üî§ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n';
  const keys = Object.keys(messages);
  for (const key of keys) {
    const preview = messages[key].split('\n')[0].substring(0, 40).replace(/\n/g, ' ');
    text += `‚Ä¢ <code>${key}</code>: ${preview}...\n`;
  }
  text += '\n‚úèÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<code>/set_text –∫–ª—é—á –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</code>';
  await ctx.answerCbQuery();
  await ctx.editMessageText(text, { parse_mode: 'HTML', ...backToAdmin });
}

async function handleSetTextCommand(ctx) {
  if (!isAdmin(ctx)) return ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  const input = ctx.message.text.trim();
  const match = input.match(/^\/set_text\s+(\S+)\s+(.+)$/s);
  if (!match) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/set_text –∫–ª—é—á "–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"</code>', { parse_mode: 'HTML' });
  }
  const [, key, value] = match;
  try {
    await updateMessage(key, value);
    await ctx.reply(`‚úÖ –¢–µ–∫—Å—Ç "${key}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!`, backToAdmin);
  } catch (e) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`, backToAdmin);
  }
}

// === –ù–û–í–û–ï: –ó–∞–ø—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è maxWinners ===
async function requestEditMaxWinners(ctx) {
  if (!isAdmin(ctx)) return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  ctx.session.awaitingDrawSetting = 'maxWinners';
  await ctx.answerCbQuery();
  await ctx.editMessageText('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 1):', backToAdmin);
}

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ===
async function showDrawSettings(ctx) {
  if (!isAdmin(ctx)) return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  const settings = await getDrawSettings();
  await ctx.answerCbQuery();
  await ctx.editMessageText('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', drawSettingsMenu(settings));
}

async function toggleDrawEnabled(ctx) {
  if (!isAdmin(ctx)) return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  const settings = await getDrawSettings();
  await updateDrawSetting('enabled', !settings.enabled);
  const newSettings = await getDrawSettings();
  await ctx.answerCbQuery();
  await ctx.editMessageText('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', drawSettingsMenu(newSettings));
}

async function requestEditMinAmount(ctx) {
  if (!isAdmin(ctx)) return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  ctx.session.awaitingDrawSetting = 'minAmount';
  await ctx.answerCbQuery();
  await ctx.editMessageText('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —á–µ–∫–∞ (–≤ —Ä—É–±–ª—è—Ö):', backToAdmin);
}

async function requestEditMaxAgeDays(ctx) {
  if (!isAdmin(ctx)) return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  ctx.session.awaitingDrawSetting = 'maxAgeDays';
  await ctx.answerCbQuery();
  await ctx.editMessageText('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–µ–∫–∞ (–≤ –¥–Ω—è—Ö, 0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):', backToAdmin);
}

async function handleDrawSettingInput(ctx) {
  if (!isAdmin(ctx)) return;
  if (!ctx.session?.awaitingDrawSetting) return;

  const key = ctx.session.awaitingDrawSetting;
  let value = ctx.message.text.trim();

  try {
    if (key === 'maxAgeDays') {
      if (value === '0' || value === '' || value.toLowerCase() === 'null') {
        value = null;
      } else {
        const num = parseInt(value, 10);
        if (isNaN(num) || num < 0) {
          throw new Error('–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
        }
        value = num;
      }
    } else if (key === 'minAmount') {
      const num = Number(value);
      if (isNaN(num) || num <= 0) {
        throw new Error('–ú–∏–Ω. —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      value = num;
    }

    await updateDrawSetting(key, value);
    await ctx.reply('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', backToAdmin);
    delete ctx.session.awaitingDrawSetting;
  } catch (e) {
    await ctx.reply(`‚ùå ${e.message}`, backToAdmin);
  }
}

// –û–±–Ω–æ–≤–∏—Ç–µ handleDrawSettingInput, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å maxWinners:
async function handleDrawSettingInput(ctx) {
  if (!isAdmin(ctx)) return;
  if (!ctx.session?.awaitingDrawSetting) return;

  const key = ctx.session.awaitingDrawSetting;
  let value = ctx.message.text.trim();

  try {
    if (key === 'maxAgeDays') {
      if (value === '0' || value === '' || value.toLowerCase() === 'null') {
        value = null;
      } else {
        const num = parseInt(value, 10);
        if (isNaN(num) || num < 0) {
          throw new Error('–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
        }
        value = num;
      }
    } else if (key === 'minAmount' || key === 'maxWinners') { // ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ maxWinners
      const num = Number(value);
      if (isNaN(num) || num <= 0 || !Number.isInteger(num)) {
        throw new Error('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      value = num;
    }

    await updateDrawSetting(key, value);
    await ctx.reply('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', backToAdmin);
    delete ctx.session.awaitingDrawSetting;
  } catch (e) {
    await ctx.reply(`‚ùå ${e.message}`, backToAdmin);
  }
}


function handleAdminAction(action) {
  return async (ctx) => {
    if (!isAdmin(ctx)) {
      return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    }

    try {
      if (action === 'export') {
        await ctx.answerCbQuery('üì§ –ì–æ—Ç–æ–≤–∏–º –≤—ã–≥—Ä—É–∑–∫—É...');
        const filePath = await exportData();
        await ctx.replyWithDocument({ source: filePath });
        require('fs').unlink(filePath, () => { });
        await ctx.reply('‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.', backToAdmin);
      } else if (action === 'draw') {
        await ctx.answerCbQuery('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à...');
        const result = await runDraw();
        if (result.success) {
          const winnerList = result.winners.map(w => {
            const id = w.telegramId;
            const username = w.username ? `@${w.username}` : '‚Äî';
            return `‚Ä¢ <b>${id}</b> (${username})`;
          }).join('\n');

          const message = `
üéâ <b>–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω!</b>

üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ (${result.totalWinners}):</b>
${winnerList}

üéüÔ∏è <b>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> ${result.totalParticipants}
    `.trim();

          await ctx.reply(message, { parse_mode: 'HTML', ...backToAdmin });
        } else {
          await ctx.reply(result.message, backToAdmin);
        }
      }
    } catch (e) {
      console.error(e);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', backToAdmin);
    }
  };
}

module.exports = {
  adminStart,
  handleEdit_texts,
  handleSetTextCommand,
  handleAdminAction,
  showDrawSettings,
  toggleDrawEnabled,
  requestEditMinAmount,
  requestEditMaxAgeDays,
  handleDrawSettingInput,
  requestEditMaxWinners,
};