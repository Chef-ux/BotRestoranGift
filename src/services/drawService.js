// src/services/drawService.js
const { Receipt } = require('../db/database');
const { Op } = require('sequelize');
const { getDrawSettings } = require('./drawSettingsService');
const { getBot } = require('../bot/instance');
const { getMessages } = require('./messageService');

async function runDraw() {
  const settings = await getDrawSettings();

  if (!settings.enabled) {
    return { success: false, message: '–†–æ–∑—ã–≥—Ä—ã—à –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω.' };
  }

  const where = {
    amount: { [Op.gte]: settings.minAmount },
  };

  if (settings.maxAgeDays !== null && settings.maxAgeDays > 0) {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - settings.maxAgeDays - 1);
    cutoffDate.setHours(0, 0, 0, 0);
    where.createdAt = { [Op.gte]: cutoffDate };
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–µ–∫–∏
  const validReceipts = await Receipt.findAll({ where, raw: true });

  if (validReceipts.length === 0) {
    return { success: false, message: '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.' };
  }

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ telegramId –∏–∑ —á–µ–∫–æ–≤
  const telegramIds = [...new Set(validReceipts.map(r => r.telegramId))];
  const allParticipants = telegramIds.map(id => ({ telegramId: id, username: null }));

  if (allParticipants.length === 0) {
    return { success: false, message: '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.' };
  }

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
  const maxWinners = Math.min(settings.maxWinners || 1, allParticipants.length);

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
  const shuffled = [...allParticipants].sort(() => 0.5 - Math.random());
  const winners = shuffled.slice(0, maxWinners);
  const winnerIds = new Set(winners.map(w => w.telegramId));
  const losers = allParticipants.filter(p => !winnerIds.has(p.telegramId));

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const messages = await getMessages();
  const winnerMsg = messages.winnerMessage || 'üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
  const loserMsg = messages.loserMessage || 'üòî –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –£—á–∞—Å—Ç–≤—É–π—Ç–µ —Å–Ω–æ–≤–∞!';

  const bot = getBot();

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
  for (const winner of winners) {
    if (!winner.telegramId) continue;
    try {
      await bot.telegram.sendMessage(winner.telegramId, winnerMsg);
    } catch (e) {
      console.warn(`–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é ${winner.telegramId}:`, e.message);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º
  for (const loser of losers) {
    if (!loser.telegramId) continue;
    try {
      await bot.telegram.sendMessage(loser.telegramId, loserMsg);
    } catch (e) {
      console.warn(`–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É ${loser.telegramId}:`, e.message);
    }
  }

  // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ: –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –∏–∑ Users (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  const { User } = require('../db/database');
  let winnersWithUsername = winners;
  try {
    const users = await User.findAll({
      where: { telegramId: { [Op.in]: winners.map(w => w.telegramId) } },
      raw: true,
    });
    const userMap = new Map(users.map(u => [u.telegramId, u.username]));
    winnersWithUsername = winners.map(w => ({
      telegramId: w.telegramId,
      username: userMap.get(w.telegramId) || null,
    }));
  } catch (e) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å username –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', e.message);
  }

  return {
    success: true,
    winners: winnersWithUsername,
    totalParticipants: allParticipants.length,
    totalWinners: winners.length,
  };
}

module.exports = { runDraw };